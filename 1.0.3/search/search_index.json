{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Getting Started","text":""},{"location":"#getting-started","title":"Getting Started","text":"<pre><code>poetry install pydantic-partials\n</code></pre> <p>or</p> <pre><code>pip install pydantic-partials\n</code></pre> <p>By default, all fields without a default value will have the ability to be partial, and can be missing from both validation and serialization.</p> <p>Very basic example is below:</p> <pre><code>from pydantic_partials import PartialModel, Missing, Partial\n\n\nclass MyModel(PartialModel):\n    some_attr: str\n    another_field: str\n\n# By default, Partial fields without any value will get set to a special `Missing` type.\n# Any field that is set to Missing is excluded from the model_dump/model_dump_json\nobj = MyModel()\nassert obj.some_attr is Missing\nassert obj.model_dump() == {}\n\n# You can set the real value at any time, and it will behave like expected.\nobj.some_attr = 'hello'\nassert obj.some_attr is 'hello'\nassert obj.model_dump() == {'some_attr': 'hello'}\n\n# You can always manually set a field to `Missing` directly.\nobj.some_attr = Missing\n\n# And now it's removed from the model-dump.\nassert obj.model_dump() == {}\n\n# The json dump is also affected in the same way.\nassert obj.model_dump_json() == '{}'\n\n# Any non-missing fields will be included when dumping/serializing model.\nobj.another_field = 'assigned-value'\n\n# And now it's removed from the model-dump.\nassert obj.model_dump() == {'another_field': 'assigned-value'}\n</code></pre> <p>You can turn off this default behavior by via <code>auto_partials</code> class argument or modeL_config option:</p> <pre><code>from pydantic_partials import PartialModel, PartialConfigDict\n\nclass TestModel1(PartialModel, auto_partials=False):\n    ...\n\nclass TestModel2(PartialModel):\n    model_config = PartialConfigDict(auto_partials=False)\n    ...\n</code></pre> <p>You can disable this automatic function. This means you have complete control of exactly which field  can be partial or not.  You can use either the generic <code>Partial[...]</code> generic or a union with <code>MissingType</code> to mark a field as a partial field.  The generic simple makes the union to MissingType for you.</p> <p>Example of disabling auto_partials:</p> <pre><code>from pydantic_partials import PartialModel, Missing, MissingType, Partial, PartialConfigDict\nfrom decimal import Decimal\nfrom pydantic import ValidationError\n\nclass TestModel(PartialModel, auto_partials=False):\n    # Can use `Partial` generic type\n    partial_int: Partial[int] = Missing\n\n    # Or union with `MissingType`\n    partial_str: str | MissingType\n\n    required_decimal: Decimal\n\ntry:\n    TestModel()\nexcept ValidationError as e:\n    print(f'Pydantic will state `required_decimal` is required: {e}')\nelse:\n    raise Exception('Pydantic should have required `required_decimal`.')\n\nobj = TestModel(required_decimal='1.34')\n\n# You can find out at any time if a field is missing or not:\nassert obj.partial_int is Missing\nassert obj.partial_str is Missing\n\nassert obj.required_decimal == Decimal('1.34')\n</code></pre>"},{"location":"changelog/","title":"Changelog","text":""},{"location":"changelog/#changelog","title":"Changelog","text":""},{"location":"changelog/#103-2024-06-10","title":"1.0.3 (2024-06-10)","text":""},{"location":"changelog/#documentation","title":"Documentation","text":"<ul> <li>clarified a point in readme/docs. (6b9fbd0)</li> <li>fix incorrect mkdocs metadata. (fe6779b)</li> </ul>"},{"location":"changelog/#102-2024-06-10","title":"1.0.2 (2024-06-10)","text":""},{"location":"changelog/#bug-fixes","title":"Bug Fixes","text":"<ul> <li>readme. (ed0766c)</li> </ul>"},{"location":"changelog/#documentation_1","title":"Documentation","text":"<ul> <li>unneeded reference in docs. (6d78d07)</li> </ul>"},{"location":"changelog/#101-2024-06-10","title":"1.0.1 (2024-06-10)","text":""},{"location":"changelog/#bug-fixes_1","title":"Bug Fixes","text":"<ul> <li>generate docs issue. (770cb7c)</li> </ul>"},{"location":"changelog/#100-2024-06-10","title":"1.0.0 (2024-06-10)","text":""},{"location":"changelog/#features","title":"Features","text":"<ul> <li>1.0.0 release (0186934)</li> <li>final code adjustments for the initial release of pydantic-partials. (7a680c3)</li> <li>initial commit, want to refactor so committing stuff now. (d0e9aa8)</li> </ul>"},{"location":"changelog/#bug-fixes_2","title":"Bug Fixes","text":"<ul> <li>version number. (c13313b)</li> </ul>"},{"location":"changelog/#documentation_2","title":"Documentation","text":"<ul> <li>added basic docs to readme. (a0eb544)</li> <li>added/changed doc-comments. (eb1eb7c)</li> </ul>"},{"location":"changelog/#changelog_1","title":"Changelog","text":""}]}